This appendix provides additional information on using R Markdown and an overview of the structure of the R Markdown document provided with the interpretive report project template.

Please ensure to review the relevant lab materials:

-   [Lab 5 session on R Markdown](05-Lab5.qmd) for an intro to R Markdown.
-   [Lab 10 Session for Interpreting Quantitative Findings Report summative assessment](10-Lab10.qmd) for instructions on how to create a project on RStudio Cloud for your interpretive report using the provided template.

Similarly, if you encounter any errors, please ensure to check the [R Issues FAQ](13-RFAQ.qmd) first for any existing solutions.

The first half of this page provides an overview of R Markdown and the second half covers the [Interpretive Report Template](12-InterpretiveReportStructure.qmd#interpretive-report-template) in more detail. **Importantly**, please ensure you at least read the [Preamble Code Chunk] section for information on best practice for installing and loading any additional packages.

## R Basics {.unnumbered}

R is a programming language used for data analysis and visualisation. A large community has built up around R through the combination of it being free and open-source software and a full featured programming language. This makes it possible for the community to contribute to and extend upon what it is possible to do with R. The Comprehensive R Archive Network, where packages are downloaded from when you `install.packages()`, helps illustrate the power that comes from an open-source community. It now lists [21,810 packages](https://cran.r-project.org/web/packages/available_packages_by_name.html) created by the R community.

These benefits are behind the rapid adoption of R within the social sciences, and academia and data analysis more broadly. However, compared to expensive closed source software where most analysis could be done through menus and mouse-clicks, using R requires learning the programming language. This is not the disadvantage it may at first seem. It does add an additional hurdle at the very start, but it also provides a far more powerful and flexible way to do data analysis. Menus are also not as simple and accessible as may first seem. A graph that can be created with a few lines of code in R may require going through multiple menus with 20+ mouse-clicks and entering text into multiple fields.

### RStudio {.unnumbered}

RStudio is what is known as an 'integrated development environment', which is just a technical way of saying that it easier to write and run R code, manage files, view outputs, and so on within a (somewhat) user-friendly interface. R strictly speaking is merely the programming language. It comes bundled with a 'command line console' that runs the code, which is all you would see if you opened plain 'R' on your desktop.

Within RStudio the R console is placed in the bottom-left panel. The top-left is where 'Sources', such as R scripts and RMarkdown files, are opened.When you run a script, RMarkdown file, or individual code chunks, the lines of code they contain are sent by RStudio to the console. RStudio will then, as appropriate, add outputs from the console below code chunks or display them in the bottom-right Viewer panel.

The top-right panel includes the main R environment. The environment is the work space where all data and functions are stored during a session. When code that reads in a dataset is run, it stores the read dataset as a dataframe object in the environment. Loading a package similarly adds its functions as objects available in the environment.

### Objects and Assignment {.unnumbered}

Objects are created in R by 'assigning' values/data to them. For example, the code below creates objects with the names `a` and `b` with numeric values 1 and 2 assigned to them respectively.

```{r}
a <- 1
b <- 2
```

After running the above, the objects can be referred to by name in subsequent code, such as adding the values they contain together:

```{r}
a + b
```

Note though that whilst R calculates the values of the two objects combined is 3, this output is not stored, as it is not being assigned to an object. If we wanted to store the value we could assign it to a new object:

```{r}
c <- a + b # 1 + 2 = 3, so 'c' is assigned the value 3
```

In contrast, if we were to assign the `a + b` back to `a`, it is effectively saying "add `a` and `b` together and update `a` to store the combined value".

```{r}
a <- a + b # 1 + 2 = 3, so 'a' is now assigned the value 3
a <- a + b # 3 + 2 = 5, so 'a' is now assigned the value 5
a <- a + b # 5 + 2 = 7, so 'a' is now assigned the value 7
a
```

This is why it is important to ensure you create objects for values/data you want to store and take care that you do not accidentally assign changes to objects that you do not intend to make. If you receive an object not found error it is likely you have either mistyped the name of the object or have not assigned anything to it yet. If variables suddenly disappear or your graphs unexpectedly show different results when re-run, it is likely that you ran code that assigned a changed version of the data back to the object storing it.

### data frames {.unnumbered}


dataframe$variable


`rage`

### functions {.unnumbered}




reading in data sets

### packages {.unnumbered}

### tidyverse {.unnumbered}

### documentation and help {.unnumbered}
