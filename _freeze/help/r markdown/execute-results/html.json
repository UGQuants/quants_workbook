{
  "hash": "fe9c204e1341d9dae53268e74b4fe91d",
  "result": {
    "engine": "knitr",
    "markdown": "## RMarkdown {#rmarkdown .unnumbered}\n\nRMarkdown allows you to combine your narrative and data analysis in one document, writing plain-text documents with [Code Chunks] that can be converted to multiple file formats, such as HTML or PDF. This makes RMarkdown documents reproducible by embedding the analysis directly into the document. Compared to doing your analysis separately, copying and pasting over your results and graphs to a Word document, it also reduces the risk of error when working on and updating your analysis.\n\nRMarkdown achieves this by combining the power of R, Markdown, and Pandoc. Markdown is a lightweight markup language with simple, human-readable syntax for formatting text (see the [Formatting] section below). Pandoc is a tool for converting files from one format to another, such as Markdown to PDF or HTML. RMarkdown builds on these tools. When you 'knit' a document, the code chunks are executed to run your analysis and generate your tables and graphs using R. The output from these are then integrated with the Markdown text and passed to Pandoc to convert into a neat and consistently formatted HTML, PDF, or other specified file format.\n\n### Formatting {.unnumbered}\n\nR Markdown uses simple, human-readable syntax for basic formatting. Whilst different to how you would write text in a Word document, it is easy to learn. This simple transparent formatting also helps avoid the hidden complexities of Word document, where formatting issues often arise from inconsistent syntax that is hidden from the user.\n\nBelow is a screenshot from RStudio with text using the key basic syntax for formatting your main text:\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](../images/markdownraw.png)\n:::\n:::\n\n\n\nAnd, this is how it appears when knitted:\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](../images/markdownknitted.png)\n:::\n:::\n\n\n\nHeadings are set using the pound / hash sign, `#`, at the start of a line, with the number of hashes determining the header level:\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](../images/headingsraw.png)\n:::\n:::\n\n\n\nAnd, how it appears when knitted:\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](../images/headingsknitted.png)\n:::\n:::\n\n\n\n### Line spacing {.unnumbered}\n\nThe main thing in RMarkdown's syntax that often trips up new users is the need to ensure there are empty line spaces between:\n\n-   Each paragraph\n-   Before and after a list\n-   Before and after a header\n\nHere's some example text in an RMarkdown document, the first without line spacing, the second with:\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](../images/linespacingraw.png)\n:::\n:::\n\n\n\nAnd, how this looks when knitted:\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](../images/linespacingknitted.png)\n:::\n:::\n\n\n\nSide-note, this practice of using empty line spaces originates from traditional coding conventions. A common coding style includes placing a specified limit on the number of characters per line, with any overflow placed on a new line. To distinguish these lines breaks to keep a limit on the number of characters per line and those used to designate new paragraphs, lists, and headers, an empty line is used. Using empty lines also helps add visual clarity when writing in RMarkdown.\n\n### Code Chunks {.unnumbered}\n\nThere are three main ways to create a code chunk:\n\n-   Click the 'Insert Code Chunk' button and from the drop-down select 'R' at the top. (See gif below)\n-   Press `Ctrl + Alt + I` (Windows & Linux) or `Cmd + Option + I` (macOS)\n-   Manually typing three back-ticks with 'r' in curly brackets before your code and adding three back-ticks after.\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](../images/insertcodechunk.gif)\n:::\n:::\n\n\n\nCurly brackets at the start of a code chunk are used to specify `{programming-language optional name, options = values}`. Since we are using R, all our code chunks have `{r ...}`. Within code chunks, the pound sign / hash, `#`, at the start of a line is used to add any comments:\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](../images/codechunk.png)\n:::\n:::\n\n\n\nSide-note, this may seem confusing given hash signs are used for headers in the main text. However, inside of a code chunk, all text is treated as code for the language specified in the curly brackets. In R, hash signs are used for comments, so they are treated as comments within the code chunk rather than as Markdown headers.\n\n#### Code Chunk Labels {.unnumbered}\n\nAdding a label is useful as a quick way to remind yourself the purpose of each code chunk. The quick outline (button at bottom of Source panel) can be used to jump to specific sections and code chunks in your document. If you provide a label for your code chunk it will also appear here:\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](../images/chunkaddingname.gif)\n:::\n:::\n\n\n\n#### Code Chunk Options {.unnumbered}\n\nOptions are used to specify how code chunks are handled when run/knitted. Two key ones we have used in the labs and in the project template:\n\n-   **echo** - whether the code chunk is displayed in knitted files.\n-   **include** - whether the code chunk *and* its output - such as tables and graphs - are displayed in knitted files.\n\nBy default, the code chunk and the output are displayed in knitted files. For the interpretive report, you do not want to display the code chunks in your knitted HTML file, so ensure you add `echo=FALSE` to the options for any new code chunk you create. Alternatively, see the [Setup Code Chunk] section for information on how to set `echo=FALSE` as a 'global option'.\n\nExamples when working in R Markdown document:\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](../images/echoincluderaw.png)\n:::\n:::\n\n\n\nAnd when knitted:\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](../images/echoincludeknitted.png)\n:::\n:::\n\n\n\n### Running Code Chunks {.unnumbered}\n\nThere are multiple ways to run your R code.\n\nWithin the top-right of each code chunk there are two buttons:\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](../images/runchunk.png)\n:::\n:::\n\n\n\n1.  Run Current Chunk - which will run the code within that code chunks only.\n2.  Run All Chunks Above - which will run all code chunks from the top of your document down to this code chunk.\n\nThe second is useful when a code chunk depends upon others being run first. Remember the R environment maintains the results of any previously run code, so you do not need to continuously run all previous chunks. However, this can be useful when debugging issues or if you restart your R environment, losing the results of previously run code, and needing to re-run everything before this chunk.\n\nFurther options can be found in the 'Run' drop-down menu, accessed from the top-right of the Source Panel:\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](../images/runoptions.png)\n:::\n:::\n\n\n\nUseful additional ones here are:\n\n-   **Run Selected Line(s)** - running all lines you have manually selected using the mouse / text cursor.\n-   **Restart R and Run All Chunks** - incredibly useful when you need to reset your R environment, this can be useful when debugging an error to figure out whether the issue stems from your current code or code you previously ran but now removed.\n\nNote as well that many of these options have keyboard shortcuts listed. Learning these pays off long-term as you will be able to write and run your code without needing to move your hands from the keyboard.\n\n### Knitting RMarkdown Documents {.unnumbered}\n\nKnitting a document runs all your R code from top to bottom, then combines the results from this with the Markdown text to convert these into different file formats. YAML is used to specify which file formats to convert to; see the [YAML Block] section for information on how this is set up within the project template.\n\n**Importantly**, when you knit an RMarkdown document, all code is run sequentially from top to bottom in a clean R environment. This ensures the document is reproducible. Anyone with a copy can knit it and produce the same results. This requires though that code to load any required packages are included within a code chunk in the document. Simply loading a package via the Console adds it to your current R environment and manually run code chunks will be able to access the package. However, when knitting, the clean R environment won't have access to the package, and you'll receive an error message when the knit process tries to run a function that requires the package. This is why it is important to include a code chunk at the top of your document that loads all required packages. See the [Preamble Code Chunk] for how to do this in the RMarkdown file provided in the interpretive report project template.\n\nAssuming you have YAML specifying which file format(s) to convert to, all you then need to do each time is simply click the 'Knit' button:\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](../images/knitting.png)\n:::\n:::\n\n\n\n### RMarkdown Cheat Sheet {.unnumbered}\n\nIt is possible to access an RMarkdown cheat sheet (as well as ones for ggplot2 and dplyr!) from within RStudio:\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](../images/markdowncheetsheet.gif)\n:::\n:::\n\n\n\nNote, from the same 'Help' menu, just below 'Cheat Sheets' is an option for 'Keyboard Shortcuts Help'. This displays a screen with most of the shortcuts available within RStudio. This also includes a link to 'See All Shortcuts...'.\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](../images/keyboard-shortcuts.gif)\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}