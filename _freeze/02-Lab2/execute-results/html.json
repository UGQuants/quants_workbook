{
  "hash": "f031b8343bdb276133a7bfe2408d54fc",
  "result": {
    "engine": "knitr",
    "markdown": "# Data in R\n\n\n\n\n\n\n\n\n\n## Welcome back!\n\nIn the previous lab, we set up an RStudio session in Posit Cloud and we got familiar with the RStudio environment and the purpose and contents of RStudio's panes. In this Lab we will learn about R packages, how to install them and load them. Also, we will use different types of data. You will have the chance to practice with additional `R` operators. Lastly, we will load a real-world data set and put in practice your new skills.\n\n::: {.callout-note title=\"Overview\"}\nBy the end of this lab you will know how to:\n\n- install and load packages in R\n- download a dataset from a URL and assign it to a named object\n- use the pipe (`|>`) operator to chain steps\n- examine, wrangle, and subset a dataset using functions\n\n:::\n\n## R Packages\n\nAs mentioned in our last lab, `R` [@R-base] is a collaborative project. This means that `R` users are developing, maintaining, and extending the functionalities constantly. When you set up `R` and RStudio for the first time, as we did last week, it comes only with the 'basic' functionalities by default. However, there are literally thousands of extensions that are developed by other users. In R, these non-default extensions are called _**packages**_.\n\nMost of the times, we use packages because they simplify our work in `R` - such as by replacing what would be dozens of lines of complex code in base R with a simple one-line function - or they allow us to extend beyond the capabilites of base R.\n\nLet's put hands-on to install and load some useful packages. We will start with one of R's most famous packages, and one we will use a lot across the labs, the `tidyverse` [@R-tidyverse] package.^[<https://www.tidyverse.org/>] First, sign-in to Posit Cloud, create/open your Labs-1-2 project, and then open the Lab-2 R Markdown file.\n\n### Open Your Posit Cloud Project\n\nFor those who missed Lab 1:\n\n1. Make sure you have a free, institutional-subscription [Posit Cloud](https://sso.posit.cloud/glasgow) account (in case you have not created one yet, please follow the guidance provided in [Lab 1](01-intro.qmd#setting-up-rstudio));\n2. If you enrolled before teaching started, you will have received an email with a link to join your lab group. If you joined the course after the start of teaching, you can find a link in your Lab Group's forum on Moodle. You tutor will also be able to provide you with a link.\n3. Follow the rest of the [Lab 1](01-intro.qmd#part-3-create-a-new-project) guidance in the 'Create a New Project' section.\n\nFor those who already joined and created a project in Lab 1, log into [Posit Cloud](https://sso.posit.cloud/glasgow) and:\n\n1. From the left-hand menu, click \"Lab Group ..\" where \"..\" is your lab group number.\n2. Within the main screen, click \"Labs-1-2\" to open the Posit Cloud project you created last week.\n\n![Select your lab group space and then open 'Labs-1-2' project](./images/posit_cloud_lab2_open-project.png)\n\n### Open the Lab 2 R Markdown file\n\nYou will find your project in same state as left it last week. To open a tab for the Lab 2 R Markdown file, click to open 'Lab-02.Rmd' in the \"Files\" tab in the bottom-right pane.\n\n![Click 'Lab-02.Rmd' in the \"Files\" tab in the bottom-right pane](./images/rstudio_lab2_rmd.png)\n\nWithin Lab 1, you may have noticed the `field: value` lines between two `---`. This is called `YAML`. The R Markdown file for this lab has a couple more lines added this time:\n\n![YAML block at top of Lab-02.Rmd](./images/rstudio_lab2_yaml.png)\n\n`title` and `author` are self-explanatory, but make sure to replace `[your name here]` with your name, making sure to keep the quotation marks around it. Without the quotation marks, you will receive an error message when trying to knit.\n\n`date` can be any text. However, `format(Sys.time(), '%d/%m/%y')` is a nice single line of R code that when run when the file is being knitted gets the current date and formats it as dd/mm/yyyy, such as 12/09/2025. This then effectively makes the `date` field \"date this file was knitted\" and saves you having to manually update it each time. (Don't knit your file just yet though as it will result in an error message until you complete the sections below!)\n\n`output` specifies what file format(s) to output to when knitting the R Markdown file. Across the labs and assessments we are using 'html_document' as it is easiest to work with across the packages we are using.\n\nAfter the YAML block, there is a 'setup' code chunk setting `knitr` options:\n\n![r setup code chunk with knitr options to set message and warmings to FALSE](./images/rstudio_lab2_setupchunk.png)\\\n\nThis may look intimidating, but it is relatively simple when parsed bit by bit:\n\n- `knitr` is the package used to knit R Markdown files\n- `knitr::opts_chunk` stores default settings applied to all code chunks\n- `knitr::opts_chunk$set(...)` runs the `set()` function on `knitr::opts_chunk` to change the defaults\n\nSo, what the code in the setup chunk does is set messages and warnings to \"FALSE\". This prevents any messages or warnings that get raised when running code chunks from also appearing in any knitted files. (Why we do this will become clear in a bit.)\n\n### Into the Tidyverse\n\n1. Once you have the Lab 2 R Markdown file open, type the following in the Console (bottom-right pane) and hit 'Enter' to run it:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"tidyverse\")\n```\n:::\n\n\n\n\n2. Wait until you get the message 'The downloaded source packages are in ...'. The install process can take a couple of minutes to finish.\n\n![Console once tidyverse package finished installing](./images/rstudio_lab2_tidyinstalled.png)\n\n3. Once the package is installed, you need to load it using the `library()` function. Please, copy and paste the following line, and run it:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n\n\nAnd that's it, `tidyverse` is ready to use in your current session!\n\nWhat you will also notice is the message raised in the Console when loading the tidyverse. This is one of the reasons why we have the have the setup chunk to prevent messages and warnings from being included in knitted files. If we knitted the Lab-02.Rmd file without the setup chunk, the message on loading the tidyverse would be added into the knitted HTML file after the preamble chunk. We will cover other options you can set to customise what appears in your knitted files in later weeks.\n\nThere are couple of things you should know. First, the packages need to be installed only per project in RStudio Cloud (and only once if you are working in RStudio Desktop version). However, packages must be loaded using the `library()` function every time you restart an R session. \n\nAnother thing to notice is that when you install a package you need to use quotation marks, whereas in `library()` you only need to write the plain package name within brackets. Usually, you will load the packages at the beginning of your script.\n\n::: {.callout-tip title=\"New Term\"}\n- `tidyverse`: a collection of R packages that share a consistent design philosophy and work together for importing, wrangling, and visualising data.\n- `YAML`: a human-readable data serialisation language, often used for configuration/settings; in R Markdown the YAML front matter between `---` sets document metadata and other options.\n:::\n\n## Types of variables\n\n`R` can handle many classes of data. It is crucial that you can distinguish the main ones. Broadly speaking there are two types of variables,\n\n1. **categorical** and; \n2. **numeric** (formally know as interval or ratio). \n\nCategorical variables are distinctive because they are limited in the number of categories it can take, e.g., country, name, political party, or gender. Ordinal data is a *sub-type* of the categorical, and it is used when the categories can be ranked and their order is meaningful, e.g., education level or level of satisfaction. Numeric values can be continuous (these are usually measured and can take infinite values, e.g. speed or time).^[For more details, please refer to the DataCamp module [Introduction to Data in R](https://learn.datacamp.com/courses/introduction-to-data-in-r).]\n\nIn `R`, the basic types of data are known as 'atomic vectors' and there are 6 of them (logical, integer, double, character, complex and raw). In the social sciences, we often use the following: `numeric`, `factor` and `character`. Numeric vectors are used to represent continuous numerical data.^[Notice that `numeric` vectors can be represented as `integer`or `double` in `R`, their difference is of little relevance for now.] On the other hand, factor vectors are used to represent categorical and ordinal data.\n\nIn R, there are couple of functions that will help us to identify the type of data. First, we have `glimpse()`. This prints some of the main characteristics of a data set, namely its overall dimension, name of each variable (column), the first values for each variable, and the type of the variable. Second we have the function `class()`, that will help us to determine the overall class(type) of on `R` object.\n\n### Activity:\n\nWe are now going to use some datasets that are pre-loaded in the `R` session by default. Please go to your 'Lab_2' project in RStudio Cloud and do the following:\n\n1. We will start with a classic dataset example in R called `iris`. This contains measurements of various flowers species (for more info type `?iris` in your console). Please go to your **console** and type the line below.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(iris)\n```\n:::\n\n\n\n\n2. What do you observe from the output?... First, it tells you the number of rows and the columns on the top. Later, it lists the name of each variable. Additionally, it tells you the type of the variable between these symbols `< >`. The first five variables in this dataset are of type `<dbl>` which is a type of numeric variable. The last, `Species`, is a factor `<fct>`. In sum, there is information of the species and four types of continuous measures associated to each flower in this dataset.\n3. Now you know that each flower belongs to a species, but what are the specific categories in this data set? To find out, type the following in your console.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlevels(iris$Species)\n```\n:::\n\n\n\n\n4. As you can see, there are three categories, which are three types of flower species. In `R` the categories in factor vectors are called _levels_.\n\nNote the syntax above. Inside the function, we used the name of the data set followed by the dollar sign (\\$), which is needed to access the specific column/variable `Species`.\n\n<!-- Let's move to a different data set. This time we will use another classic example called `diamonds`. This data set contains some characteristics of more than 50K pieces of diamonds (to get more information type `?diamonds` in your console). -->\n\n<!-- 1. Let's glimpse at the `diamonds` data by running this line in your console. -->\n<!-- ```{r eval=FALSE} -->\n<!-- glimpse(diamonds) -->\n<!-- ``` -->\n<!-- 2. What can you observe?...Yes, this time we do not have factor columns, but we have `<ord>` in cut, colour and clarity, which means these are ordinal vectors. Now look at the levels of cut: -->\n<!-- ```{r eval=FALSE} -->\n<!-- levels(diamonds$cut) -->\n<!-- ``` -->\n<!-- 3. As you can see, there are five types of cut in this data set. You can even go further and find out how many diamond pieces are of each type by running this line: -->\n<!-- ```{r eval=FALSE} -->\n<!-- table(diamonds$cut) -->\n<!-- ``` -->\n\nNow, let's get serious and explore Star Wars. Yes, the famous film series! \n\nThe `starwars` data set from the `dplyr` package contains information about the characters, including height, hair colour, and sex (to get more information type `?starwars` in your console). At this time we will use a reduced version of the full data set. Please complete the following activities from your `R` script (pane 1).\n\n1. First, we will run the next couple of lines to reduce the data set, and then we will glimpse the Star Wars characters:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars2 <- starwars[, 1:11]\nglimpse(starwars2)\n```\n:::\n\n\n\n\n2. What do you observe this time? ... It seems that the data type is not consistent with their content. For example, the variables `species`, `gender`, and `hair_color` are of type `<chr>` (that is `character`), when according to what we just learnt they should be a factor. To transform them, we will use the function ´factor()´. This process is known as coercing a variable, that is when you change from one type to another.\n\n<!-- 3. Look what happens if you do the this..It confirms that this variable is stored as a character: -->\n<!-- ```{r eval=FALSE} -->\n<!-- class(starwars2$species) -->\n<!-- ``` -->\n<!-- 5. What if we first call the `factor()` function and then we ask R again about the type of vector using `class()` -->\n<!-- ```{r eval=FALSE} -->\n<!-- factor(starwars2$species) %>% class() -->\n<!-- ``` -->\n\n6. Let's coerce the species variable from character to factor and assign the result to the same column in the dataset.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars2$species <- factor(starwars2$species)\n```\n:::\n\n\n\n\n7. Let's check if the type of variable really changed by glimpsing the data and checking the levels of `species`. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(starwars2)\nlevels(starwars2$species)\n```\n:::\n\n\n\n\nThe glimpse result now is telling us that `species` is a `<fct>`, as expected. Furthermore, the `levels()` function reveals that there are 37 types of species, including Human, Ewok, Droid, and more.\n\nHopefully, these examples will help you to identify the main vector types and, more importantly, to coerce them into an appropriate type. Be aware that many data sets represent categories with numeric values, for example, using '0' for males and '1' for females. Usually, large data sets are accompanied by extra information in a _code book_ or _documentation_ file, which specifies the values of the numeric code and their respective meaning. It's important to read the code book/documentation of every data set as the conventions and meanings can vary.\n\n## More operators and some essential symbols\n\n<!-- More operators and symbols...Let's start with the hashtag `#`. Even though this is not an operator in R, this symbol allow us to include a comment or ´mute´ the whole line in your script. In fact, it is important that you add comments on your own code, so when you come back later to your code, you can have a quicker idea of what it is going in each line of the script. -->\n\n<!-- The dollar sign `$` is frequently used and it is part of base R. Actually, we used it a couple of times in the previous section. This is used to access or extract information from an object (e.g. a data set). For instance, earlier we selected only one variable from the `starwars` data set by writing `starwars2$species`. A practical tip to quickly access or find variables in a data set is to write the name of your object followed by the dollar sign only, like this: `starwars2$` (without specifying the variable to be accessed yet). After, type `tab` in your keyboard. Then, R will display a list with the variables available. Try it yourself! -->\n\nA useful operator is the pipe `|>`. This is the base R version of the pipe. This operator passes the result of one operation to the next.\n\n(There is also a `%>%` version you may see that is part of the `tidyverse` package. The tidyverse version came first, where due to its popularity an equivalent was added to base R. This operator passes the result of one operation to the next.)\n\nCheck the results of the following operations in your **Console**:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1 |> sum(1)\n1 |> sum(1) |> sum(5)\n```\n:::\n\n\n\n\nObserve what happened...The result from the first line was 2. This is because this line can be read as: 'take 1, THEN sum 1'. Therefore, the result is 2. \n\nSimilarly, the second line follows this process: 'take 1, THEN sum 1, take the result of this (which is '2') and THEN sum 5'. Therefore, the result is 7. This can sound a bit abstract at this point, but we will practice with some data in the next section.\n\n## Black lives matter!\n\nIn this section we will work with data originally collected by The Guardian in 2015, for more information click [here](https://www.theguardian.com/us-news/ng-interactive/2015/jun/01/about-the-counted). The data set we will use today is an extended version which was openly shared in GitHub by the American news website [FiveThirtyEight](https://fivethirtyeight.com/). This data set contains information about the people that were killed by police or other law enforcement bodies in the US, such as age, gender, race/ethnicity, etc. Additionally, it includes information about the city or region where the event happened. For more information click [here](https://github.com/fivethirtyeight/data/tree/master/police-killings).\n\n### Downloading and reading the data\n\nFor the following excercices, please make sure that your are working in your `R` script.\n\nFirst, we will create a new folder in our project directory to store the data. To do it from `R`, run this line in your script (Don't worry if you get a warning. This appears because you already have a folder with this name):\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndir.create(\"data\")\n```\n:::\n\n\n\n\nNote that in the 'Files' tab of Pane 4, there is a new folder called `data`.\n\nNow, download the data from the GitHub repository using the function `download.file()`. This function takes two arguments separated by a comma: (1) the URL and (2) the destination (including the directory, file name, and file extension), as shown below. Also, since the file we downloaded is wrapped in a `.zip` file, we will need to unzip it using `unzip()`. Copy, paste in your script, the following lines: \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndownload.file(\n  \"https://projects.fivethirtyeight.com/data-webpage-data/datasets/police-killings.zip\",\n  \"data/police-killings.zip\"\n)\nunzip(\"data/police-killings.zip\", exdir = \"data\")\n```\n:::\n\n\n\n\nAfter following the previous steps, we are ready to read the data. As you can see in the 'File' tab, the data comes as a `.csv` file. Thus, we can use the `read_csv()` function included in the `tidyverse` package (make sure you the package is loaded in your session as explained in a [previous section](#installing-packages)). We will assign the data in an object called `police`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npolice <- read_csv(\"data/police-killings/police_killings.csv\")\n```\n:::\n\n\n\n\n### Examining the data\n\nIf you look at your 'Environment' tab in pane 2, you will see there is a new object called `police`, which has 467 observations and 34 variables (or columns). To start exploring the contents, we will glimpse the `police` data as following:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(police)\n```\n:::\n\n\n\n\nAs you can see, there are several variables included in the dataset, such as age, gender, law enforcement agency (`lawenforcementagency`), or whether the victim was armed (`armed`). You will see some of these variables are not in the appropriate type. For instance, some are categorical and should be type `<fct>` instead of `<chr>`. \n\n### Data wrangling\n\nBefore coercing these variables, we will create a smaller subset selecting only the variables that we are interested in. To do so, we can use the `select()` function. The `select` function takes the name of the data first and then the name of the variables we want to keep (no quotation marks needed). We will select a few variables and assign the result to a new object called `police_2`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npolice_2 <- select(police, age, gender, raceethnicity, lawenforcementagency, armed)\n```\n:::\n\n\n\n\nIf you look again to the 'Environment' tab, there is a second data set with the same number of observations but only 5 variables. You can glimpse this object to have a better idea of its contents.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(police_2)\n```\n:::\n\n\n\n\nHaving a closer look at the reduced version, we can see that in fact all the variables are of type `<chr>`, including `age`.\n\nLet's coerce the variables in to their correct type. We will start with age, from character to numeric:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npolice_2 <- police_2 %>% mutate(age = as.numeric(age))\n```\n:::\n\n\n\n\nAge is not known for some cases. Thus, it is recorded as 'Unknown' in the dataset. Since this is not recognized as a numeric value in the coercion process, `R` automatically sets it as a missing value, `NA`. This is why it will give you a warning message.\n\nWe can continue coercing `raceethnicity` and `gender` from character to a factor:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npolice_2 <- police_2 %>% mutate(raceethnicity = factor(raceethnicity))\npolice_2 <- police_2 %>% mutate(gender = factor(gender))\n```\n:::\n\n\n\n\nLet's run a summary of your data. This shows the number of observations in each category or a summary of a numeric variable:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(police_2)\n```\n:::\n\n\n\n\nThere are some interesting figures coming out from the summary. For instance, in age you can see that the youngest is... 16 years old(?!), and the oldest 87 years old. Also, the vast majority are male individuals (445 vs 22). In relation to race/ethnicity, roughly half of them is 'White', whereas 'Black' individuals represent an important share. One may question about the proportion of people killed in terms of race/ethnicity compared to the composition of the total population (considering Black is a minority group in the US).\n\nLet's suppose that we only want observations in which race/ethnicity is not unknown. To 'remove' _undesired_ observation we can use the `filter()` function. We will assign the result of `filter` in a variable called `police_2`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npolice_2 <- police_2 %>% filter(raceethnicity != \"Unknown\")\n```\n:::\n\n\n\n\nSo, what just happened in the code above? First, the pipe operator, `%>%`: What we are doing verbally is _take the object `police_2`, THEN filter raceethnicity based on a condition_. Later, what is happening inside `filter`? Let's have a look at what `R` does in the background for us (Artwork by \\@alison_horst):\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Filter. Source: Artwork by @Horst.](./images/lab_2_filter.jpg)\n:::\n:::\n\n\n\n\nIn the example above, we are keeping the observations in `raceethnicity` that are NOT EQUAL to 'Unknown'. Finally, when we assigned the result to an object named as the same as our previous object, we replaced the _old_ dataset with the filtered version.\n\n<!-- Finally, there are times when you would like to group categories in a factor differently, for example to simplify a graph or statistical analysis. Coming back to race/ethnicity, we may observe that there are some relatively small categories, e.g. 'Native American', 'Asian/Pacific Islander'. So we will create a new variable called `raceethnicity_recoded` using `mutate()` which will recode these categories in to one only called 'Other' using the function `recode()`. We will save the result under the same data named `police_2`. -->\n\n<!-- ```{r eval = FALSE} -->\n<!-- police_2 <- police_2 %>%  -->\n<!--   mutate(raceethnicity_recoded = recode(raceethnicity, -->\n<!--                                         'Asian/Pacific Islander' = 'Other',  -->\n<!--                                         'Native American' = 'Other')) -->\n<!-- ``` -->\n\n<!-- If we look at the summary again, the classifications of `raceethnicity` are reduced in the new variable `raceethnicity_recoded`. The categories 'Native American' and 'Asian/Pacific Islander' were summed in only one category called `Other`. -->\n\n## Activities\n\nDiscuss the following questions with your neighbour or tutor:\n\n1. What is the main purpose of the functions `select()` and `filter`?\n2. What does *coerce* mean in the context of `R`? and Why do we need to coerce some variables?\n3. What is the `mutate()` function useful for?\n\nUsing the `police_2` dataset:\n\n1. Filter how many observations are ‘White’ in `raceethnicity`? How may rows/observations are left?\n2. How many ‘Hispanic/Latino’ are there in the dataset?\n3. Using the example of Figure 2.3, could you filter how many were killed that were (a) 'Black' and (b) killed by firearm ('firearm')?\n4. What about 'White' and 'firearm'?\n\nExtra activities:\n\n1. Why did you have to use quotes in the following: `filter(police, raceethnicity==”White” & raceethnicity==”firearm”)`?\n2. What do you have to repeat the variable `raceethnicity` twice?\n\nThis is the end of Lab 2. Again, the changes in your R Markdown file should be saved automatically in RStudio. However, make sure this is the case as covered in Lab 1. After this, you can close the tab in your web browser. Hope you had fun!\n",
    "supporting": [
      "02-Lab2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}