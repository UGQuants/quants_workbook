

# Introduction to R {#lab-intro}

::: {.callout-note title="Overview"}
By the end of this lab you will:

- log into Posit Cloud and join your lab space
- create an R Markdown file
- learn basic R syntax and use R as a calculator
- create a neatly formatted HTML file by knitting an R Markdown file 
:::

::: {.callout-caution title="select()"}
Choose which columns of a data table to keep, optionally renaming them or changing their order.

**Usage**

```{r}
#| eval: false
select(.data, ...)
```

**Arguments**

- `.data` - the data frame you want to choose columns from.
- `...` - one or more column selectors. You can list column names (`col1, col2`), rename while selecting (`name_name = old_name`), or use simple helpers (e.g. `where(is.numeric)` to select all numeric columns)

**Returns**

A data frame containing only the selected columns, in the orer given. The original `.data` is unchanged ...
:::

## Tools We Are Using

For this course we will be using [R](https://www.r-project.org/) [@R-base] and [RStudio](https://rstudio.com/) as the main tools for conducting quantitative analysis.

`R` and the basic versions of `RStudio` are free and open-source software. There are 'free' as in cost, but - more importantly - they are free software that guarantee users four foundamental freedoms. As explained on the FSFE's [What is Free Software?](https://fsfe.org/freesoftware/index.en.html) page, these are:

> - **Use**: Free Software can be used for any purpose and is free of restrictions such as licence expiry or geographic limitations.
> - **Study**: Free Software and its code can be studied by anyone, without non‐disclosure agreements or similar restrictions.
> - **Share**: Free Software can be shared and copied at virtually no cost.
> - **Improve**: Free Software can be modified by anyone, and these improvements can be shared publicly. 

Even though `R` appeared in the early 90s, it has been gaining a lot of popularity in recent years. A main contributor to its success is being free software, with a large community of people contributing improvements to `R` directly as well as extending it with further additional software packages. In fact, it is now one of the most common software for doing statistics in academia.

```{r fig.cap="Source: www.https://tiobe.com/.", include=FALSE}
knitr::include_graphics("images/r-lang-popularity-increase.png")
```

![Source: https://tiobe.com](images/r-lang-popularity-increase.png){fig-alt="Line chart showing the dramatic increase in R's popularity over time."}

`R` and `RStudio` are two separate things. `R` is the actual programming language and the main processing tool which does the computations in the background, whereas RStudio integrates all functionalities into a (relatively) friendly and interactive interface. In short, for this course (and most of the time in practice) you chiefly use RStudio whilst `R` is doing all the work in the background. Thereafter, we will refer to `R`, as the integrated interface.

::: {.callout-tip title="New terms"}
- `R`: a programming language and environment for data analysis.
- `RStudio`: a user-interface for working with R.
:::

## Why R?

At this point you may be wondering why you need to bother learning these tools. In the following sections you will see some of the advantages and examples that can be achieved using `R`.

### R: a flexible tool

R can be applied in a wide variety of fields and subjects, including not only those in the social sciences (e.g. sociology, politics, or policy research), but also in the humanities (e.g. history, digital humanities), natural and physical sciences (e.g. biology, chemistry, or geography), health (e.g. medical studies, public health, epidemiology), business and management (e.g. finance, economics, marketing), among many others. 

The broad application of R is due to its flexibility which allows it to perform a range of tasks related to data. These cover tasks at initial stages, such as downloading, mining, or importing data. But it is also useful to manipulate, edit, transform, and organise information. Furthermore, and most important for us, there are a set of tools that allow us to analyse data using a range of statistical techniques. These are useful to understand, summarize, and draw conclusions about samples, e.g. people.

Lastly, `R` is powerful to communicate and share information and documents. There are several extensions (called _**packages**_ in R) that can help to produce static and interactive plots/charts, maps, written reports, interactive applications or even entire books! In fact this workbook was written from RStudio.

`R` works in a command-based `Console` environment. This means that you need to call the commands (or _**functions**_, as they are called in R) through writing text. This can look intimidating at first glance. But do not worry, we will guide you step by step. Importantly, that these commands can be used and combined in multiple ways is what gives R its incredible flexible. Once you get the hang of these you will find that they are faster and more powerful than using a button and menu based interface. RStudio also helps make working with R more accessible.

::: {.callout-tip title="New terms"}
We will cover these in more detail in future weeks, but as initial short definitions:

- `Package`: a collection of ready-made R tools - such as functions with help pages, and sometimes example data - that you can install (and later load) to add features to R.
- `Function`: a named reusable set of instructions that can take inputs (referred to as `arguments`), run some steps, and return a result.
- `Argument`: input provided to a function that tell the function what to use and how to behave.
:::

### Advantages of using R

Some advantages of using R are the following:

- It is free and open source software. You do not need to pay for a licence. You can then use it anywhere at any time, even if you do not have an affiliation to an institution or organisation (e.g. University or workplace);
- It is a collaborative project. This means that it is the users who maintain, extend, and update its applications;
- It is reproducible. Research can be more transparent since you will get the same results every time you run your analysis through a specific pathway (i.e. through R Markdown files);
- High compatibility. You can read and produce most types of file extensions;
- Online community. There are a number of easy-access web resources to support you in the learning process.

<!-- ### Activity. Examples -->

<!-- So far we have talked about some properties of R, but it is worthwhile having a look your-self and discover some of the potential through some examples using _real-life_ data sets. Please take a few minutes to explore the following links that were completely developed using R. -->

<!-- * [COVID-19 tracker](https://vac-lshtm.shinyapps.io/ncov_tracker/?_ga=2.140661819.883107759.1598267087-903949304.1571305449) -->
<!-- * [69 Love Songs: A Lyrical Analysis](https://committedtotape.shinyapps.io/sixtyninelovesongs/) -->
<!-- * [ScotPHO's profiles tool](https://scotland.shinyapps.io/ScotPHO_profiles_tool/) -->

<!-- What do you think about them? Which one did you enjoy the most? -->

<!-- Of course the examples above are meant for you to have a sense of the flexibility and potential to process and communicate quantitative analyses in `R`. This course covers the basics to process data and conduct quantitative analyses in social sciences. -->

## Getting started

### Setting up RStudio

There are multiple ways to work with R. One, and by far the most common, is to download both `R` and RStudio Desktop and install the applications on your local device.[^Positron]

On this course, we use Posit Cloud instead. Posit Cloud provides an on-line version of RStudio that does not require installing any additional software. You can run it directly from your browser (e.g. Chrome, Firefox, Safari, etc), including if using a Chromebook or tablet. This makes it easier to access your RStudio projects and files within the labs and when using your own devices.

To get started with Posit Cloud, follow the next steps:

#### **Part 1** Create a Posit Cloud account

<!-- The following instructions are without SSO: -->
<!-- 1. Click on this link [RStudio Cloud](https://rstudio.cloud/), which should automatically open a new tab in your web browser or go directly to the browser and copy this URL: https://rstudio.cloud/; -->
<!-- 2. Click on the "Get started for free" option. Click on the "Sign up" button (ignore the 'Plus' option); -->
<!-- 3. Enter your details and sign up with your student *UoG email address* (if available, access using the institutional log in option using your UoG credentials); -->
<!-- 4. If required by the platform, access your UoG email and verify your address by following the instructions you received in an email. -->

<!-- The following instructions are according to the SSO -->

1. Click on this link [Posit Cloud - SSO](https://sso.posit.cloud/glasgow), which should automatically open a new tab in your web browser or go directly to the browser and copy this URL: <https://sso.posit.cloud/glasgow>;
2. Click 'Log In Via University of Glasgow' which will take you to the usual University of Glasgow login pages;
3. Enter your University of Glasgow email address and password in the login page as normal;

![Posit SSO Login Page](images/sso_login.png){fig-alt="Screenshot of the Posit SSO log in page for University of Glasgow"}

4. Done! After logging in with your University of Glasgow account, you will be taken to your personal RStudio Cloud workspace;

#### **Part 2** Join your lab group

1. You will receive a link from your tutor to join your lab group on RStudio Cloud (the link will be posted on Moodle too). N.b. you must use this specific link to join and access your lab group workspace, as each link is unique to your group. So only use your group's specific link. Copy and paste the link in your web browser. You should see the following window:

```{r fig.cap="Join Space.", echo=FALSE}
knitr::include_graphics("./images/rstudio_cloud_joinspace.png")
```

2. Join your lab by clicking on the 'Join space' button shown above.
3. Open the shared space form the left-hand side pane called 'Quants Lab Group..' and start the Lab 1 project by clicking on the 'Start' button as shown below:

```{r fig.cap="Start project.", echo=FALSE}
knitr::include_graphics("./images/rstudio_cloud_startproject.png")
```

<!-- <br> -->
<!-- In addition and only optionally you can download and install the Desktop versions by following these links: -->

<!-- * R https://cran.r-project.org/mirrors.html (You can choose any of the host institutions). -->
<!-- * RStudio https://rstudio.com/products/rstudio/ (Choose the RStudio Desktop free version). -->

<!-- For detailed instructions on how to set up R and RStudio Desktop version, watch [Video 2, Chapter 2](https://study.sagepub.com/fogarty/student-resources/r-screencast-tutorials/chapter-2-introduction-to-r-and-r-studio) [@Fogarty2019]. Remember this is only optional for now. -->


### RStudio environment

#### RStudio screen

Once you have started 'Lab 1' you will see the screen below:

```{r fig.cap="Project name.", echo=FALSE}
knitr::include_graphics("./images/rstudio_cloud_lab1_empty.png")
```

Now, go to the "File" tab and create a R Script as follows `File > New file > R Script`

```{r fig.cap="New R Script.", echo=FALSE}
knitr::include_graphics("./images/rstudio_cloud_new_script.png")
```

Once you have created your first R Script, save it by clicking on File > Save as.. > `[write the name of your file]`. 

After this, your RStudio screen will be split in four **important** windows or panes as shown below:

```{r fig.cap="RStudio panes.", echo=FALSE}
knitr::include_graphics("./images/rstudio_cloud_panels.png")
```

* In **Pane 1**, you have your newly created `R` script. This is the area where you will be working most of the time. From here, you will write functions. To run an `R` script line, you can click on the `Run` green arrow situated on the top of pane 1 or more commonly you can run a code line by typing `alt + enter`. The things you write in this section will be saved in your R script file.

![Run button](./images/rstudio_cloud_run_button.png)

* In **Pane 2**, you have the "Global Environment", this is one of the most useful tabs in this pane. It shows you the active 'objects' that you have available/loaded in your current session (this will probably make more sense in the coming sections).
* In **Pane 3**, you have the R Console, this is where you will see most of the results of the functions you run from your script (pane 1). You can also write and run functions from here, by typing the function and hitting enter. NOTE that what you do here will NOT be saved, this is usually used to quickly call functions that you do not want to save in your script.

```{r fig.cap="Console.", echo=FALSE}
knitr::include_graphics("./images/rstudio_cloud_console.png")
```

* Finally, in **Pane 4** you have multiple useful tabs. In the `File` tab you can see the files and directories that you have in your R project. In the `Plot` tab you will see a preview of the static plots/charts you will be producing from your script. In `Packages`, you have a list of the extensions or plug-ins (called 'packages' in R) that are installed in your working environment. The `Help` contains some resources that clarify or expand what each of the functions does. Again, probably this will make more sense once you get started. We will come back to this later. Finally, the `Viewer` displays interactive outputs.

## Hands on R

Now you are ready! It is your turn to start exploring and getting familiar with R by completing the following activities.

#### R as calculator

Go to your **console** (pane 3, bottom-left pane), write some simple calculations and run them by typing 'enter' after each of them, as shown below.

```{r fig.cap="R Console as calculator.", echo=FALSE}
knitr::include_graphics("./images/rstudio_cloud_r_as_calculator.png")
```

<br>
Try different operations such as `50 / 20` or `3 * 5`.

Fairly simple, right? And don't forget, it is entirely normal to copy/paste and tweak any existing codes. Unlike writing an essay or an exam, you don't actually need to know and write codes "off the cuff" or recite/memorise any syntax. You are only expected to know how to run the codes and tweak them as you go along, there is a huge amount of trial and error when you work in R. So don't worry if you feel like you are just making minor changes to the codes, that's how it's supposed to work, and the first few weeks is all about getting comfortable in using R, then the level of challenge will go up. Let's continue with the next activities!

#### Testing logical operators

Now, write and run the following lines in your **console** (pane 3) and take some time to observe the result in detail for each of them:

* `10 == 10`
* `10 != 10`
* `1 == 5`
* `1 > 5`
* `'a' == 'a'`
* `'a' == 'b'`

What do you see? ... 

...That's it! When you use the double equal sign `==` you are _asking_ R whether the value on the left hand-side of the operator is equal to the one on the right hand-side. Likewise, when you combine the exclamation mark `!` with other operator, you get the reversed result. In the past exercises you used `!=`, this was interpreted as "is not equal to", that is why `10 != 10` returns `FALSE`, but `10 == 10` returns `TRUE`. 

`R` can process different classes of inputs. In this case we used letters and we _asked_ R whether 'a' was equal to 'a', and of course the result is `TRUE`. Note that when you want to input text (referred as _character_ values in R), you need quotation marks `'`. If you want to enter numeric values, you simply input the raw number. These are different 'class' values.

Perhaps logical operators do not make much sense at this point, but you will find out later that they are useful to manipulate data. For example, these are essential to filter a data set based on specific _rules_ or patterns.

#### Assigning values to 'objects'

In `R`, it is very common (and practical) to store values or data as 'objects'. These are temporally stored in your current session. Let's try it! 

Now, we will work in the `R` script file (**Pane 1**, top-left pane), write the following and run it by clicking the green arrow or using `alt + enter`:

```{r eval = FALSE}
a <- 10
a + 5
```

What do you observe?...

...That's right! The operator `<-` assigned the numeric value `10` to the object `a` (on the left hand-side of the arrow). Later, you used the object (`a`) to compute a sum (i.e, `a + 5`). 

Now, write and run the following in your `R` script (Pane 1)

```{r eval = FALSE}
c <- 3
a * c
```

As you can see, you stored the numeric value `3` in the variable `c`. Then, you called the previously created object `a` in a multiplication. 

In the same way as you assigned these simple variables, you will store other types of objects later, e.g. vectors, data frames or lists. This is useful because those objects will be ready in your session to do some computations.

There are a few things to note when assigning objects to variables. If you use a different value to the same variable, e.g. by typing `a <- 5`, you will replace the old value with the new. So, instead of having `a` representing the value 10, you will have `5`. You can see the objects available in your session on the Global Environment ('Environment' tab in Pane 2) as shown below.

<br>

```{r fig.cap="'Environment' tab.", echo=FALSE}
knitr::include_graphics("./images/rstudio_cloud_environment.png")
```

<!-- ### Load your first file -->

<!-- You are now done with the basics, it is time to get serious. We will use R to download a real data set and then we will load it as an object in our working session. The data we will use for this exercise is the [Scottish Hill Races](https://dasl.datadescription.com/datafile/scottish-hill-races/). -->

<!-- The first thing you will do is download the data set. Copy, paste the following bit in to your R Script (pane 1) and run it: -->

<!-- ```{r eval = FALSE} -->
<!-- download.file('https://dasl.datadescription.com/download/data/3440', 'scottish-hill-races.txt') -->
<!-- ``` -->

<!-- As you can see, the previous function `download.file()` takes two specifications (called arguments in R) separated by a comma `,`. The first is the URL, and the second is the destination of the file, in this case it specifies the name and extension of the file. Both of these arguments need to be enclosed in quotation marks. Note in the File tab of pane 4 that you have a new document in your Project. -->

<!-- <br> -->
<!-- ![Console](./images/rstudio_cloud_file.png) -->

<!-- <br> -->
<!-- Next, we will read the data using the function `read.delim()` and we will assign it as `scottish_races`. Copy the following line, paste it and run it. -->

<!-- ```{r eval = FALSE} -->
<!-- scottish_races <- read.delim("scottish-hill-races.txt", sep = "\t") -->
<!-- ``` -->

<!-- If you look at your Global Environment tab in pane 2, you will see that you have a new object called 'scottish_races'. It also gives you some basic information, e.g. it says that data has 94 observations and 5 variables (94 rows and 5 columns). -->

<!-- Now you can explore your new data set which is available in your session. Use following functions in your script to understand the data: -->

<!-- ```{r eval = FALSE} -->
<!-- names(scottish_races) -->
<!-- str(scottish_races) -->
<!-- summary(scottish_races) -->
<!-- ``` -->

<!-- What can you see? -->

<!-- Finally, a handy function that lets you visualize the data is `View()`. Write it in your console and run it: -->

<!-- `View(scottish_races)` -->

<!-- By running this function, the following tab will automatically pop-up in pane 1: -->

<!-- <br> -->
<!-- ![Console](./images/rstudio_cloud_view.png) -->
<!-- <br> -->

<!-- Here, you can scroll down or visualize your columns to your right in a table-style format. You can sort the contents of the variables by clicking on the header. But note that you cannot make any changes from here. Once you finished checking your data, simply click on the cross mark and you will be back to your script tab. -->

This is a very good start, great job! 

Note that the changes made in your script are saved automatically in RStudio Cloud. To verify this, have a look at the name of your script in the top-left of pane 1. If changes are due to be saved, the name will be written in red. If it is in red, save changes manually by clicking on the disk icon. After you have made sure your changes are saved, end your session simply by closing the RStudio Cloud tab in your browser.

## Activity

Discuss the following questions with your neighbour or tutor:

1. What are the main differences between working on a `R` script file (pane 1) and directly on the console (pane 3)?
2. Can you describe what happens when your run the following code? (tip: look at the environment tab in pane 2)

```{r}
object1 <- 10
object1 <- 30
```

[^Positron]: If you have prior experience working with coding environments, such as Visual Studio Code, you may want to take a look at [Positron](https://positron.posit.co/). It is based on Visual Studio Code and setup to have a similar panel layout as within RStudio. One of the benefits of open-source software is having this diversity of tools can pick from. It is advised though for this course to stick with Posit Cloud and RStudio.
